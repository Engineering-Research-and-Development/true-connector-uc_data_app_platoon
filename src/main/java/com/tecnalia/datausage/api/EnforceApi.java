/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tecnalia.datausage.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-06T08:37:54.369Z[GMT]")
@Validated
public interface EnforceApi {

	@Operation(summary = "usageControlUse", description = "", tags = { "enforce-usage-controller" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "OK"),

			@ApiResponse(responseCode = "201", description = "Created"),

			@ApiResponse(responseCode = "401", description = "Unauthorized"),

			@ApiResponse(responseCode = "403", description = "Forbidden"),

			@ApiResponse(responseCode = "404", description = "Not Found") })
	@RequestMapping(value = "/enforce/usage/use", consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Object> usageControlUseUsingPOST(
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "targetDataUri", required = true) String targetDataUri,
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "providerUri", required = true) String providerUri,
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "consumerUri", required = true) String consumerUri,
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "consuming", required = true) Boolean consuming,
			@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody String body);

	@Operation(summary = "enforce contract Agreement", description = "", tags = {
			"enforce-usage-controller-agreement" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "OK"),

			@ApiResponse(responseCode = "201", description = "Created"),

			@ApiResponse(responseCode = "401", description = "Unauthorized"),

			@ApiResponse(responseCode = "403", description = "Forbidden"),

			@ApiResponse(responseCode = "404", description = "Not Found") })
	@RequestMapping(value = "/enforce/usage/agreement", consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Object> enforceContractAgreementPOST(
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "contractAgreementUri", required = true) String contractAgreement,
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "requestedArtifact", required = true) String requestedArtifact,
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "", required = true, schema = @Schema()) @Valid @RequestParam(value = "consuming", required = true) Boolean consuming,
			@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody String body);

}
