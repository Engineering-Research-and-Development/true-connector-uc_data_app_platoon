/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tecnalia.datausage.api;

import com.tecnalia.datausage.model.ContractStore;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-29T09:57:40.792Z[GMT]")
public interface PolicyApi {

    @Operation(summary = "addPolicy", description = "", tags={ "odrl-policy-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "201", description = "Created"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/policy/usage/odrl",
        produces = { "text/plain" }, 
        consumes = { "application/json","text/plain" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> addPolicyUsingPOST(@Parameter(in = ParameterIn.DEFAULT, description = "policy", required=true, schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "deletePolicy", description = "", tags={ "odrl-policy-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/policy/usage/odrl/{policyId}",
        method = RequestMethod.DELETE)
    ResponseEntity<String> deletePolicyUsingDELETE(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("policyId") String policyId);


    @Operation(summary = "getAllPolicies", description = "", tags={ "odrl-policy-controller" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = ContractStore.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/policy/usage/odrl",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ContractStore>> getAllPoliciesUsingGET();

}

